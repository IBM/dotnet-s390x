#!/bin/bash
set -e -u -x -o pipefail
shopt -s extglob

pushd "$(dirname "$0")"
. dotnet-versions
popd

BASEDIR=$(pwd)
PACKAGESDIR=$BASEDIR/local-packages
DOWNLOADDIR=$BASEDIR/local-downloads
OUTPUTDIR=$BASEDIR/output

mkdir -p "$PACKAGESDIR"
mkdir -p "$DOWNLOADDIR"
mkdir -p "$OUTPUTDIR"

ARCH=${ARCH-s390x}
case "$ARCH on $(uname -m)" in
"ppc64le on ppc64le" | "s390x on s390x" | "x64 on x86_64")
    CROSS=false
    ;;
*)
    CROSS=true
    ;;
esac

runtime_conf=Release
runtime_flavor=Mono
msbuild_conf=Release
roslyn_conf=Release
aspnetcore_conf=Release
sdk_conf=Release

function build_runtime {
    runtime_build_flags=(
        --ci
        -c "$runtime_conf"
        -clang
        -keepnativesymbols true
        "/p:PrimaryRuntimeFlavor=$runtime_flavor"
        "/p:DotNetUseShippingVersions=true"
        "/p:DeterministicSourcePaths=false"
        "/p:SkipArchivesBuild=false"
    )
    if [ "$ARCH" = s390x ] || [ "$ARCH" = ppc64le ]; then
        runtime_build_flags+=(
            --cmakeargs "-DFEATURE_GDBJIT=true"
            --cmakeargs "-DFEATURE_GDBJIT_FRAME=true"
            --cmakeargs "-DFEATURE_GDBJIT_SYMTAB=true"
        )
    fi
    if [ "$runtime_build_id" != "" ]; then
        runtime_build_flags+=(
            "/p:ContinuousIntegrationBuild=true"
            "/p:OfficialBuildId=$runtime_build_id"
        )
    fi
    if "$CROSS"; then
        runtime_build_flags+=(
            -arch "$ARCH"
            -cross
        )
    fi
    # https://github.com/dotnet/arcade/issues/9846
    if { [ "$ARCH" = "s390x" ] || [ "$ARCH" = "ppc64le" ]; } && ! "$CROSS"; then
        runtime_build_flags+=("/p:RunApiCompat=false")
    fi
    pushd runtime
    if [ -z ${SKIP_BUILD_RUNTIME+x} ] && [ ! -e .skip-build ]; then
        ROOTFS_DIR=/ ./build.sh "${runtime_build_flags[@]}"
    fi
    if [ -z ${SKIP_PACKAGE_RUNTIME+x} ] && [ ! -e .skip-package ]; then
        cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Host.linux-$ARCH.$runtime_version.nupkg" "$PACKAGESDIR"
        cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Runtime.linux-$ARCH.$runtime_version.nupkg" "$PACKAGESDIR"
        cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Ref.$runtime_version.nupkg" "$PACKAGESDIR"
        mkdir -p "$DOWNLOADDIR/Runtime/$runtime_version"
        cp "artifacts/packages/$runtime_conf/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" "$DOWNLOADDIR/Runtime/$runtime_version"
        # Necessary for incoherent packages: pretend that the runtime that we built
        # has the version that ASP.NET requires.
        # https://devblogs.microsoft.com/dotnet/a-deep-dive-into-how-net-builds-and-ships/
        mkdir -p "$DOWNLOADDIR/Runtime/$aspnetcore_transport_version"
        cp \
            "artifacts/packages/$runtime_conf/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" \
            "$DOWNLOADDIR/Runtime/$aspnetcore_transport_version/dotnet-runtime-$aspnetcore_runtime_version-linux-$ARCH.tar.gz"
        cp "artifacts/packages/$runtime_conf/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" "$OUTPUTDIR"
        cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Host.linux-$ARCH.$runtime_version.nupkg" "$OUTPUTDIR"
        if ! git merge-base --is-ancestor e68313e HEAD; then
            cp "artifacts/packages/$runtime_conf/Shipping/dotnet-runtime-symbols-linux-$ARCH-$runtime_version.tar.gz" "$OUTPUTDIR"
        else
            cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Host.linux-$ARCH.$runtime_version.symbols.nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Runtime.linux-$ARCH.$runtime_version.symbols.nupkg" "$OUTPUTDIR"
        fi
        cp "artifacts/packages/$runtime_conf/Shipping/Microsoft.NETCore.App.Runtime.linux-$ARCH.$runtime_version.nupkg" "$OUTPUTDIR"
        if [ "$runtime_major_version" -lt 9 ]; then
            # https://github.com/dotnet/runtime/pull/91655
            cp "artifacts/packages/$runtime_conf/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHost.$runtime_version.nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHostPolicy.$runtime_version.nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHostResolver.$runtime_version.nupkg" "$OUTPUTDIR"
        fi
        if [ "$runtime_version_label" = servicing ]; then
            cp "artifacts/packages/$runtime_conf/NonShipping/Microsoft.NETCore.ILAsm.$runtime_version_prefix-"@(dev|ci)*".nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/NonShipping/Microsoft.NETCore.ILDAsm.$runtime_version_prefix-"@(dev|ci)**".nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/NonShipping/runtime.linux-$ARCH.Microsoft.NETCore.ILAsm.$runtime_version_prefix-"@(dev|ci)*".nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/NonShipping/runtime.linux-$ARCH.Microsoft.NETCore.ILDAsm.$runtime_version_prefix-"@(dev|ci)*".nupkg" "$OUTPUTDIR"
        else
            cp "artifacts/packages/$runtime_conf/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.ILAsm.$runtime_version.nupkg" "$OUTPUTDIR"
            cp "artifacts/packages/$runtime_conf/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.ILDAsm.$runtime_version.nupkg" "$OUTPUTDIR"
        fi
        if [ "$ARCH" = s390x ]; then
            tar -C artifacts/obj/mono/[Ll]inux."$ARCH"."$runtime_conf"/out/lib -czf "$OUTPUTDIR"/libmono-profiler-log-"$ARCH".tar.gz libmono-profiler-log.so
        fi
    fi
    popd
}

function build_msbuild {
    msbuild_build_flags=(
        --ci
        --restore
        --pack
        --configuration "$msbuild_conf"
        "/p:EnableNgenOptimization=false"
    )
    if [ "$msbuild_build_id" != "" ]; then
        msbuild_build_flags+=(
            "/p:ContinuousIntegrationBuild=true"
            "/p:OfficialBuildId=$msbuild_build_id"
        )
    fi
    pushd msbuild
    if [ -z ${SKIP_BUILD_MSBUILD+x} ] && [ ! -e .skip-build ]; then
        ./build.sh "${msbuild_build_flags[@]}"
    fi
    if [ -z ${SKIP_PACKAGE_MSBUILD+x} ] && [ ! -e .skip-package ]; then
        for I in artifacts/packages/Release/*/*; do cp "$I" "$PACKAGESDIR"; done
    fi
    popd
}

function build_roslyn {
    pushd roslyn
    roslyn_build_flags=(
        --ci
        --restore
        --build
        --pack
        --binaryLog
        --configuration "$roslyn_conf"
        "/p:EnableNgenOptimization=false"
    )
    if [ "$roslyn_build_id" != "" ]; then
        roslyn_build_flags+=(
            "/p:ContinuousIntegrationBuild=true"
            "/p:OfficialBuildId=$roslyn_build_id"
        )
    fi
    if [ -z ${SKIP_BUILD_ROSLYN+x} ] && [ ! -e .skip-build ]; then
        ./eng/build.sh "${roslyn_build_flags[@]}"
    fi
    if [ -z ${SKIP_PACKAGE_ROSLYN+x} ] && [ ! -e .skip-package ]; then
        for I in artifacts/packages/Release/*/*.nupkg; do cp "$I" "$PACKAGESDIR"; done
    fi
    popd
}

function build_sdk {
    SDK_CONF=Release
    SDK_VERSION=$sdk_version_prefix
    sdk_build_flags=(
        --ci
        --pack
        --configuration "$SDK_CONF"
        "/p:Architecture=$ARCH"
        "/p:HostRid=linux-x64"
        "/p:BundleRuntimePacks=true"
        "/p:PublicBaseURL=file://$DOWNLOADDIR/"
        "/p:CoreSetupBlobRootUrl=file://$DOWNLOADDIR/"
        "/p:DotnetToolsetBlobRootUrl=file://$DOWNLOADDIR/"
    )
    if [ "$sdk_build_id" != "" ]; then
        sdk_build_flags+=(
            "/p:ContinuousIntegrationBuild=true"
            "/p:OfficialBuildId=$sdk_build_id"
        )
    fi
    if [ "$runtime_flavor" = Mono ]; then
        sdk_build_flags+=("/p:DISABLE_CROSSGEN=true")
    fi
    if [ "$sdk_version_suffix" != "" ]; then
        SDK_VERSION=$SDK_VERSION-$sdk_version_suffix
    fi
    pushd sdk
    if [ -z ${SKIP_BUILD_SDK+x} ] && [ ! -e .skip-build ]; then
        ./build.sh "${sdk_build_flags[@]}"
    fi
    if [ -z ${SKIP_PACKAGE_SDK+x} ] && [ ! -e .skip-package ]; then
        mkdir -p "$DOWNLOADDIR/Sdk/$SDK_VERSION"
        cp "artifacts/packages/Release/NonShipping/dotnet-toolset-internal-$SDK_VERSION.zip" "$DOWNLOADDIR/Sdk/$SDK_VERSION"
        cp "artifacts/packages/$sdk_conf/Shipping/dotnet-sdk-$SDK_VERSION-linux-$ARCH.tar.gz" "$OUTPUTDIR"
    fi
    popd
}

function build_aspnetcore {
    ASPNETCORE_VERSION=$aspnetcore_version_prefix
    aspnetcore_major_minor_version=$aspnetcore_major_version.$aspnetcore_minor_version
    aspnetcore_build_flags=(
        --ci
        --configuration "$aspnetcore_conf"
        --pack
        "/p:DotNetAssetRootUrl=file://$DOWNLOADDIR/"
    )
    if [ "$runtime_major_version" -gt 9 ]; then
        aspnetcore_build_flags+=(
            "/p:PublicBaseURL=file://$DOWNLOADDIR/"
            "/p:MicrosoftNETCoreAppRuntimeVersion=$runtime_version"
            "/p:DotNetRuntimeDownloadPath=Runtime/$runtime_version/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz"
        )
    fi
    if [ "$aspnetcore_build_id" != "" ]; then
        aspnetcore_build_flags+=(
            "/p:ContinuousIntegrationBuild=true"
            "/p:OfficialBuildId=$aspnetcore_build_id"
        )
    fi
    if [ "$aspnetcore_version_suffix" != "" ]; then
        ASPNETCORE_VERSION=$ASPNETCORE_VERSION-$aspnetcore_version_suffix
    fi
    if "$CROSS"; then
        aspnetcore_build_flags+=(-arch "$ARCH")
    fi
    pushd aspnetcore
    if [ -z ${SKIP_BUILD_ASPNETCORE+x} ] && [ ! -e .skip-build ]; then
        # Since commit 243f90d0bec5 ("Use Arcade's DownloadFiles task (#46039)")
        # aspnetcore no longer supports downloading runtime from custom URLs.
        mkdir -p artifacts/obj/Microsoft.AspNetCore.App.Runtime
        cp "$DOWNLOADDIR/Runtime/$runtime_version/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" \
            artifacts/obj/Microsoft.AspNetCore.App.Runtime/
        if [ "$runtime_version" != "$aspnetcore_runtime_version" ]; then
            cp "$DOWNLOADDIR/Runtime/$aspnetcore_transport_version/dotnet-runtime-$aspnetcore_runtime_version-linux-$ARCH.tar.gz" \
                artifacts/obj/Microsoft.AspNetCore.App.Runtime/
        fi
        # Run build script multiple times to work around yarn race condition
        for i in $(seq 1 3); do
            if ./eng/build.sh "${aspnetcore_build_flags[@]}"; then
                break
            fi
            if [ "$i" -eq 3 ]; then
                exit 1
            fi
        done
    fi
    if [ -z ${SKIP_PACKAGE_ASPNETCORE+x} ] && [ ! -e .skip-package ]; then
        cp "artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.AspNetCore.App.Runtime.linux-$ARCH.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
        cp "artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.AspNetCore.App.Ref.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
        cp "artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.DotNet.Web.ItemTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
        cp "artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.DotNet.Web.ProjectTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
        spa_templates=artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.DotNet.Web.Spa.ProjectTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg
        if [ -e "$spa_templates" ]; then
            cp "$spa_templates" "$PACKAGESDIR"
        fi
        if ! git merge-base --is-ancestor 7949421 HEAD; then
            aspnetcore_tgz=artifacts/installers/$aspnetcore_conf/aspnetcore-runtime-internal-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz
        else
            aspnetcore_tgz=artifacts/packages/$aspnetcore_conf/Shipping/aspnetcore-runtime-internal-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz
        fi
        if [ ! -e "$aspnetcore_tgz" ]; then
            if ! git merge-base --is-ancestor 7949421 HEAD; then
                aspnetcore_tgz=artifacts/installers/$aspnetcore_conf/aspnetcore-runtime-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz
            else
                aspnetcore_tgz=artifacts/packages/$aspnetcore_conf/Shipping/aspnetcore-runtime-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz
            fi
        fi
        mkdir -p "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
        cp "$aspnetcore_tgz" "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
        cp "$aspnetcore_tgz" "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version/aspnetcore-runtime-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz"
        cp "artifacts/installers/$aspnetcore_conf/aspnetcore_base_runtime.version" "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
        cp "artifacts/packages/$aspnetcore_conf/Shipping/Microsoft.AspNetCore.App.Runtime.linux-$ARCH.$ASPNETCORE_VERSION.nupkg" "$OUTPUTDIR"
    fi
    popd
}

if [ "$#" -gt 0 ]; then
    projects=("$@")
else
    projects=(runtime msbuild roslyn aspnetcore sdk)
fi

export NuGetAudit=false
for project in "${projects[@]}"; do
    eval "build_${project}"
done
