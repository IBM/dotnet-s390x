#!/bin/bash
set -e -u -x

pushd "$(dirname "$0")"
. dotnet-s390x-versions
popd

BASEDIR=$(pwd)
PACKAGESDIR=$BASEDIR/local-packages
DOWNLOADDIR=$BASEDIR/local-downloads
OUTPUTDIR=$BASEDIR/output

mkdir -p "$PACKAGESDIR"
mkdir -p "$DOWNLOADDIR"
mkdir -p "$OUTPUTDIR"

ARCH=s390x
CROSS=true
RUNTIME_CONF=Release
runtime_build_flags=(
    -c "$RUNTIME_CONF"
    -clang
    -keepnativesymbols true
)
if "$CROSS"; then
    runtime_build_flags+=(
        -arch "$ARCH"
        -cross
    )
fi
if [ "$runtime_version_suffix" != "" ]; then
    runtime_build_flags+=(/p:VersionSuffix="$runtime_version_suffix")
fi
# https://github.com/dotnet/arcade/issues/9846
if [ "$ARCH" = "s390x" ] && ! "$CROSS"; then
    runtime_build_flags+=(/p:RunApiCompat=false)
fi
pushd runtime
if [ -z ${SKIP_BUILD_RUNTIME+x} ] && [ ! -e .skip-build ]; then
    # shellcheck disable=SC2046,SC2086
    ROOTFS_DIR=/ ./build.sh "${runtime_build_flags[@]}"
fi
if [ -z ${SKIP_PACKAGE_RUNTIME+x} ] && [ ! -e .skip-package ]; then
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/Microsoft.NETCore.App.Host.linux-$ARCH.$runtime_version.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/Microsoft.NETCore.App.Runtime.linux-$ARCH.$runtime_version.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/Microsoft.NETCore.App.Ref.$runtime_version.nupkg" "$PACKAGESDIR"
    mkdir -p "$DOWNLOADDIR/Runtime/$runtime_version"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" "$DOWNLOADDIR/Runtime/$runtime_version"
    # Necessary for incoherent packages: pretend that the runtime that we built
    # has the version that ASP.NET requires.
    # https://devblogs.microsoft.com/dotnet/a-deep-dive-into-how-net-builds-and-ships/
    mkdir -p "$DOWNLOADDIR/Runtime/$aspnetcore_transport_version"
    cp \
        "artifacts/packages/$RUNTIME_CONF/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" \
        "$DOWNLOADDIR/Runtime/$aspnetcore_transport_version/dotnet-runtime-$aspnetcore_runtime_version-linux-$ARCH.tar.gz"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/dotnet-runtime-$runtime_version-linux-$ARCH.tar.gz" "$OUTPUTDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/Microsoft.NETCore.App.Host.linux-$ARCH.$runtime_version.nupkg" "$OUTPUTDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/Microsoft.NETCore.App.Runtime.linux-$ARCH.$runtime_version.nupkg" "$OUTPUTDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHost.$runtime_version.nupkg" "$OUTPUTDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHostPolicy.$runtime_version.nupkg" "$OUTPUTDIR"
    cp "artifacts/packages/$RUNTIME_CONF/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.DotNetHostResolver.$runtime_version.nupkg" "$OUTPUTDIR"
    if [ "$runtime_version_label" = servicing ]; then
        cp "artifacts/packages/$RUNTIME_CONF/NonShipping/Microsoft.NETCore.ILAsm.$runtime_version_prefix-dev.nupkg" "$OUTPUTDIR"
        cp "artifacts/packages/$RUNTIME_CONF/NonShipping/Microsoft.NETCore.ILDAsm.$runtime_version_prefix-dev.nupkg" "$OUTPUTDIR"
    else
        cp "artifacts/packages/$RUNTIME_CONF/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.ILAsm.$runtime_version.nupkg" "$OUTPUTDIR"
        cp "artifacts/packages/$RUNTIME_CONF/Shipping/runtime.linux-$ARCH.Microsoft.NETCore.ILDAsm.$runtime_version.nupkg" "$OUTPUTDIR"
    fi
    if [ "$ARCH" = s390x ]; then
        cp "artifacts/obj/mono/Linux.$ARCH.Release/out/lib/libmono-profiler-log.so" "$OUTPUTDIR"
    fi
fi
popd

MSBUILD_CONF=Release
msbuild_build_flags=""
if [ "$msbuild_version_suffix" != "" ]; then
    msbuild_build_flags="$msbuild_build_flags /p:VersionSuffix=$msbuild_version_suffix"
fi
pushd msbuild
if [ -z ${SKIP_BUILD_MSBUILD+x} ] && [ ! -e .skip-build ]; then
    # shellcheck disable=SC2086
    ./build.sh \
        --pack \
        -c "$MSBUILD_CONF" \
        $msbuild_build_flags
fi
if [ -z ${SKIP_PACKAGE_MSBUILD+x} ] && [ ! -e .skip-package ]; then
    for I in artifacts/packages/Release/*/*; do cp "$I" "$PACKAGESDIR"; done
fi
popd

pushd roslyn
roslyn_build_flags=""
if [ "$roslyn_version_suffix" != "" ]; then
    roslyn_build_flags="$roslyn_build_flags /p:VersionSuffix=$roslyn_version_suffix"
fi
if [ -z ${SKIP_BUILD_ROSLYN+x} ] && [ ! -e .skip-build ]; then
    # shellcheck disable=SC2086
    ./eng/build.sh \
        --restore \
        --build \
        --pack \
        -c Release \
        $roslyn_build_flags
fi
if [ -z ${SKIP_PACKAGE_ROSLYN+x} ] && [ ! -e .skip-package ]; then
    for I in artifacts/packages/Release/*/*.nupkg; do cp "$I" "$PACKAGESDIR"; done
fi
popd

SDK_CONF=Release
SDK_VERSION=$sdk_version_prefix
sdk_build_flags=""
if [ "$sdk_version_suffix" != "" ]; then
    SDK_VERSION=$SDK_VERSION-$sdk_version_suffix
    sdk_build_flags="$sdk_build_flags /p:VersionSuffix=$sdk_version_suffix"
fi
pushd sdk
if [ -z ${SKIP_BUILD_SDK+x} ] && [ ! -e .skip-build ]; then
    # shellcheck disable=SC2086
    ./build.sh \
        --pack \
        -c "$SDK_CONF" \
        /p:Architecture="$ARCH" \
        $sdk_build_flags
fi
if [ -z ${SKIP_PACKAGE_SDK+x} ] && [ ! -e .skip-package ]; then
    mkdir -p "$DOWNLOADDIR/Sdk/$SDK_VERSION"
    cp "artifacts/packages/Release/NonShipping/dotnet-toolset-internal-$SDK_VERSION.zip" "$DOWNLOADDIR/Sdk/$SDK_VERSION"
fi
popd

ASPNETCORE_CONF=Release
ASPNETCORE_VERSION=$aspnetcore_version_prefix
aspnetcore_major_minor_version=$aspnetcore_major_version.$aspnetcore_minor_version
aspnetcore_build_flags=""
if [ "$aspnetcore_version_suffix" != "" ]; then
    ASPNETCORE_VERSION=$ASPNETCORE_VERSION-$aspnetcore_version_suffix
    aspnetcore_build_flags="$aspnetcore_build_flags /p:VersionSuffix=$aspnetcore_version_suffix"
fi
pushd aspnetcore
if [ -z ${SKIP_BUILD_ASPNETCORE+x} ] && [ ! -e .skip-build ]; then
    # Run build script multiple times to work around yarn race condition
    for i in $(seq 1 3); do
        # shellcheck disable=SC2046,SC2086
        if ./eng/build.sh \
                $("$CROSS" && echo -arch "$ARCH") \
                -c "$ASPNETCORE_CONF" \
                --pack \
                /p:DotNetAssetRootUrl="file://$DOWNLOADDIR/" \
                $aspnetcore_build_flags; then
            break
        fi
        if [ "$i" -eq 3 ]; then
            exit 1
        fi
    done
fi
if [ -z ${SKIP_PACKAGE_ASPNETCORE+x} ] && [ ! -e .skip-package ]; then
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.AspNetCore.App.Runtime.linux-$ARCH.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.AspNetCore.App.Ref.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.DotNet.Web.ItemTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.DotNet.Web.ProjectTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.DotNet.Web.Spa.ProjectTemplates.$aspnetcore_major_minor_version.$ASPNETCORE_VERSION.nupkg" "$PACKAGESDIR"
    mkdir -p "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
    cp "artifacts/installers/$ASPNETCORE_CONF/aspnetcore-runtime-internal-$ASPNETCORE_VERSION-linux-$ARCH.tar.gz" "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
    cp "artifacts/installers/$ASPNETCORE_CONF/aspnetcore_base_runtime.version" "$DOWNLOADDIR/aspnetcore/Runtime/$aspnetcore_internal_version"
    cp "artifacts/packages/$ASPNETCORE_CONF/Shipping/Microsoft.AspNetCore.App.Runtime.linux-$ARCH.$ASPNETCORE_VERSION.nupkg" "$OUTPUTDIR"
fi
popd

INSTALLER_CONF=Release
INSTALLER_VERSION=$installer_version_prefix
installer_build_flags=""
if [ "$installer_version_suffix" != "" ]; then
    INSTALLER_VERSION=$INSTALLER_VERSION-$installer_version_suffix
    installer_build_flags="$installer_build_flags /p:VersionSuffix=$installer_version_suffix"
fi
pushd installer
if [ -z ${SKIP_BUILD_INSTALLER+x} ] && [ ! -e .skip-build ]; then
    rm -rf artifacts
    # Setting HostRid to linux- instead of ubuntu- avoids requiring Debian installer packages
    # shellcheck disable=SC2086
    ./build.sh \
        -c "$INSTALLER_CONF" \
        /p:HostRid=linux-x64 \
        /p:Architecture="$ARCH" \
        /p:PublicBaseURL="file://$DOWNLOADDIR/" \
        /p:CoreSetupBlobRootUrl="file://$DOWNLOADDIR/" \
        /p:DotnetToolsetBlobRootUrl="file://$DOWNLOADDIR/" \
        $installer_build_flags
fi
if [ -z ${SKIP_PACKAGE_INSTALLER+x} ] && [ ! -e .skip-package ]; then
    cp "artifacts/packages/$INSTALLER_CONF/Shipping/dotnet-sdk-$INSTALLER_VERSION-linux-$ARCH.tar.gz" "$OUTPUTDIR"
fi
popd
