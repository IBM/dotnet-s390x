#!/bin/bash
set -e -u -x
cd "$(dirname "$0")"

function echo_version {
    local name=$1
    local version=$2

    echo "${name}_version=$version"
    version_prefix=$(echo "$version" | cut -d- -f1)
    echo "${name}_version_prefix=$version_prefix"
    version_suffix=$(echo "$version" | cut -d- -f2- -s)
    echo "${name}_version_suffix=$version_suffix"
    major_version=$(echo "$version_prefix" | cut -d. -f1)
    echo "${name}_major_version=$major_version"
    minor_version=$(echo "$version_prefix" | cut -d. -f2)
    echo "${name}_minor_version=$minor_version"

    short_date=$(echo "$version_suffix" | cut -d- -f2)
    if [ "$short_date" == "$version_suffix" ]; then
        short_date=$(echo "$version_suffix" | rev | cut -d. -f2 | rev)
        revision=$(echo "$version_suffix" | rev | cut -d. -f1 | rev)
    else
        revision=$(echo "$version_suffix" | cut -d- -f3)
    fi
    yy=$((short_date / 1000))
    mm=$(((short_date - 1000 * yy) / 50))
    dd=$((short_date - 1000 * yy - 50 * mm))
    echo -n "${name}_build_id="
    printf "20%02d%02d%02d.%s\n" "$yy" "$mm" "$dd" "$revision"
}

function echo_property {
    local name=$1
    local path=$2
    local property=$3

    value=$(xmllint --xpath "/Project/PropertyGroup/${property}/text()" "$path")
    # shellcheck disable=SC2016
    if [ "${value:0:2}" = '$(' ] && [ "${value:${#value} - 1}" = ')' ]; then
        echo_property "$name" "$path" "${value:2:-1}"
    else
        echo "$name=$value"
    fi
}

platform=7.0.1xx
while [ $# -gt 0 ]; do
    case "$1" in
    --platform)
        shift
        platform=$1
        ;;
    *)
        break
        ;;
    esac
    shift
done
if [ $# -gt 0 ]; then
    installer_version=$1
    shift
fi
git submodule update --init --recursive
cd installer
if [[ -z ${installer_version+x} ]]; then
    url=https://aka.ms/dotnet/$platform/daily/productCommit-linux-x64.txt
else
    url=https://dotnetbuilds.azureedge.net/public/Sdk/$installer_version/productCommit-linux-x64.txt
fi
manifest=$(curl -L "$url")
# installer:e0c95ad21e5eac311e454c65335008161b3e4763, 7.0.103
[[ "$manifest" =~ installer:([0-9a-f]+),\ ([^[:space:]]+) ]] || \
[[ "$manifest" =~ installer_commit=\"([0-9a-f]+)\"\ installer_version=\"([^\"]+)\" ]]
installer_sha=${BASH_REMATCH[1]}
installer_version=${BASH_REMATCH[2]}
git fetch
git checkout --force "$installer_sha"
repos=(
    runtime:installer:Microsoft.NETCore.App.Ref:true
    msbuild:installer:Microsoft.Build:true
    roslyn:installer:Microsoft.Net.Compilers.Toolset:true
    sdk:installer:Microsoft.NET.Sdk:true
    aspnetcore:installer:Microsoft.AspNetCore.App.Ref:true
    aspnetcore_internal:installer:Microsoft.AspNetCore.App.Ref.Internal:false
    templating:sdk:Microsoft.TemplateEngine.Abstractions:true
)
cd ..
echo_version installer "$installer_version" >dotnet-s390x-versions
git add installer
for repo in "${repos[@]}"; do
    IFS=: read -r -a path_name <<< "$repo"
    xpath="string(/Dependencies/ProductDependencies/Dependency[@Name=\"${path_name[2]}\"]/@Version)"
    version=$(xmllint --xpath "$xpath" "${path_name[1]}"/eng/Version.Details.xml)
    if "${path_name[3]}"; then
        cd "${path_name[0]}"
        git fetch
        xpath="/Dependencies/ProductDependencies/Dependency[@Name=\"${path_name[2]}\"]/Sha/text()"
        sha=$(xmllint --xpath "$xpath" ../"${path_name[1]}"/eng/Version.Details.xml)
        git checkout --force "$sha"
        cd ..
        git add "${path_name[0]}"
    fi
    echo_version "${path_name[0]}" "$version" >>dotnet-s390x-versions
done

{
    echo_property \
        aspnetcore_transport_version \
        aspnetcore/eng/Versions.props \
        MicrosoftNETCoreBrowserDebugHostTransportVersion

    echo_property \
        aspnetcore_runtime_version \
        aspnetcore/eng/Versions.props \
        MicrosoftNETCoreAppRuntimeVersion

    echo_property \
        runtime_version_label \
        runtime/eng/Versions.props \
        PreReleaseVersionLabel
} >>dotnet-s390x-versions

git add dotnet-s390x-versions
git commit -m "Update to v$installer_version"
git tag "v$installer_version"
